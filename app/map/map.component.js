"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var element_registry_1 = require("nativescript-angular/element-registry");
var nativescript_google_maps_sdk_1 = require("nativescript-google-maps-sdk");
var nativescript_geolocation_1 = require("nativescript-geolocation");
var image_1 = require("ui/image");
var image_source_1 = require("image-source");
// Important - must register MapView plugin in order to use in Angular templates
element_registry_1.registerElement('MapView', function () { return nativescript_google_maps_sdk_1.MapView; });
var MapComponent = (function () {
    function MapComponent() {
        this.latitude = -32.9114;
        this.longitude = -68.845;
        this.zoom = 12;
        this.bearing = 0;
        this.tilt = 0;
        this.padding = [40, 40, 40, 40];
        var that = this;
        var location = nativescript_geolocation_1.getCurrentLocation({ desiredAccuracy: 3, updateDistance: 10, maximumAge: 20000, timeout: 20000 }).
            then(function (loc) {
            if (loc) {
                console.log("Current location is: ", loc.latitude, loc.longitude);
                that.latitude = loc.latitude;
                that.longitude = loc.longitude;
            }
        }, function (e) {
            console.log("Error: " + e.message);
        });
    }
    //Map events
    MapComponent.prototype.onMapReady = function (event) {
        console.log('Map Ready');
        var imgSrc = new image_source_1.ImageSource();
        imgSrc.fromResource("rec_pin");
        var image = new image_1.Image();
        image.imageSource = imgSrc;
        this.mapView = event.object;
        console.log("Setting a marker...");
        var marker = new nativescript_google_maps_sdk_1.Marker();
        marker.position = nativescript_google_maps_sdk_1.Position.positionFromLatLng(this.latitude, this.longitude);
        marker.title = "YO";
        marker.snippet = "Ubicaci√≥n actual";
        marker.userData = { index: 1 };
        this.mapView.addMarker(marker);
        var marker1 = new nativescript_google_maps_sdk_1.Marker();
        marker1.position = nativescript_google_maps_sdk_1.Position.positionFromLatLng(-32.94838894324855, -68.84135093539953);
        marker1.title = "Plastico";
        marker1.snippet = "14:00 18:00";
        marker1.icon = image;
        marker1.userData = { index: 1 };
        this.mapView.addMarker(marker1);
        var marker2 = new nativescript_google_maps_sdk_1.Marker();
        marker2.position = nativescript_google_maps_sdk_1.Position.positionFromLatLng(-32.896186947688356, -68.81551690399647);
        marker2.title = "Vidrio";
        marker2.snippet = "15:30 19:30";
        marker2.icon = image;
        marker2.userData = { index: 1 };
        this.mapView.addMarker(marker2);
    };
    MapComponent.prototype.onCoordinateTapped = function (args) {
        console.log("Coordinate Tapped, Lat: " + args.position.latitude + ", Lon: " + args.position.longitude, args);
    };
    MapComponent.prototype.onMarkerEvent = function (args) {
        console.log("Marker Event: '" + args.eventName
            + "' triggered on: " + args.marker.title
            + ", Lat: " + args.marker.position.latitude + ", Lon: " + args.marker.position.longitude, args);
    };
    MapComponent.prototype.onCameraChanged = function (args) {
        console.log("Camera changed: " + JSON.stringify(args.camera), JSON.stringify(args.camera) === this.lastCamera);
        this.lastCamera = JSON.stringify(args.camera);
    };
    return MapComponent;
}());
MapComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'map',
        templateUrl: 'map.html',
        styleUrls: ['map.css'],
    }),
    __metadata("design:paramtypes", [])
], MapComponent);
exports.MapComponent = MapComponent;
//# sourceMappingURL=data:application/json;base64,